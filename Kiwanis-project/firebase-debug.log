[debug] [2024-02-17T15:06:49.715Z] ----------------------------------------------------------------------
[debug] [2024-02-17T15:06:49.717Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\mwind\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js ext:install firebase/firestore-send-email --project=kiwanis-test
[debug] [2024-02-17T15:06:49.718Z] CLI Version:   13.2.1
[debug] [2024-02-17T15:06:49.718Z] Platform:      win32
[debug] [2024-02-17T15:06:49.718Z] Node Version:  v20.8.0
[debug] [2024-02-17T15:06:49.718Z] Time:          Sat Feb 17 2024 16:06:49 GMT+0100 (heure normale dâ€™Europe centrale)
[debug] [2024-02-17T15:06:49.718Z] ----------------------------------------------------------------------
[debug] 
[debug] [2024-02-17T15:06:49.771Z] Object "" in "firebase.json" has unknown property: {"additionalProperty":"projects"}
[debug] [2024-02-17T15:06:49.775Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2024-02-17T15:06:49.776Z] > authorizing via signed-in user (concoursphotokiwanis@gmail.com)
[debug] [2024-02-17T15:06:49.776Z] [iam] checking project kiwanis-test-dd86f for permissions ["firebase.projects.get","firebaseextensions.instances.create"]
[debug] [2024-02-17T15:06:49.777Z] > refreshing access token with scopes: []
[debug] [2024-02-17T15:06:49.778Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2024-02-17T15:06:49.778Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2024-02-17T15:06:50.045Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2024-02-17T15:06:50.046Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2024-02-17T15:06:50.061Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/kiwanis-test-dd86f:testIamPermissions [none]
[debug] [2024-02-17T15:06:50.062Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/kiwanis-test-dd86f:testIamPermissions x-goog-quota-user=projects/kiwanis-test-dd86f
[debug] [2024-02-17T15:06:50.062Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/kiwanis-test-dd86f:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[debug] [2024-02-17T15:06:50.891Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/kiwanis-test-dd86f:testIamPermissions 200
[debug] [2024-02-17T15:06:50.891Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/kiwanis-test-dd86f:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[info] i  extensions: ensuring required API firebaseextensions.googleapis.com is enabled... 
[debug] [2024-02-17T15:06:50.892Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/kiwanis-test-dd86f/services/firebaseextensions.googleapis.com [none]
[debug] [2024-02-17T15:06:50.892Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/kiwanis-test-dd86f/services/firebaseextensions.googleapis.com x-goog-quota-user=projects/kiwanis-test-dd86f
[debug] [2024-02-17T15:06:52.073Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/kiwanis-test-dd86f/services/firebaseextensions.googleapis.com 200
[debug] [2024-02-17T15:06:52.073Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/kiwanis-test-dd86f/services/firebaseextensions.googleapis.com [omitted]
[info] +  extensions: required API firebaseextensions.googleapis.com is enabled 
[debug] [2024-02-17T15:06:52.074Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/kiwanis-test-dd86f [none]
[debug] [2024-02-17T15:06:52.500Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/kiwanis-test-dd86f 200
[debug] [2024-02-17T15:06:52.500Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/kiwanis-test-dd86f {"projectId":"kiwanis-test-dd86f","projectNumber":"518391517553","displayName":"kiwanis-test","name":"projects/kiwanis-test-dd86f","resources":{"hostingSite":"kiwanis-test-dd86f"},"state":"ACTIVE","etag":"1_2b803d69-870b-495f-bfe2-5ed37073f3cd"}
[info] i  extensions: Checking project IAM policy... 
[debug] [2024-02-17T15:06:52.501Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/projects/kiwanis-test-dd86f/instances pageSize=100&pageToken=
[debug] [2024-02-17T15:06:53.550Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/projects/kiwanis-test-dd86f/instances 200
[debug] [2024-02-17T15:06:53.550Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/projects/kiwanis-test-dd86f/instances {}
[debug] [2024-02-17T15:06:53.550Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/kiwanis-test-dd86f:getIamPolicy [none]
[debug] [2024-02-17T15:06:53.858Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/kiwanis-test-dd86f:getIamPolicy 200
[debug] [2024-02-17T15:06:53.859Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/kiwanis-test-dd86f:getIamPolicy {"version":1,"etag":"BwYRlNT20Ts=","bindings":[{"role":"roles/cloudfunctions.admin","members":["serviceAccount:firebase-adminsdk-td3h0@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.developer","members":["serviceAccount:github-action-741034844@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.serviceAgent","members":["serviceAccount:service-518391517553@gcf-admin-robot.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:518391517553@cloudservices.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-518391517553@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-td3h0@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:firebase-adminsdk-td3h0@kiwanis-test-dd86f.iam.gserviceaccount.com","serviceAccount:github-action-741034844@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/firebasehosting.admin","members":["serviceAccount:github-action-741034844@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-518391517553@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-518391517553@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/firestore.serviceAgent","members":["serviceAccount:service-518391517553@gcp-sa-firestore.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-td3h0@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:concoursphotokiwanis@gmail.com"]},{"role":"roles/run.viewer","members":["serviceAccount:github-action-741034844@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/serviceusage.apiKeysViewer","members":["serviceAccount:github-action-741034844@kiwanis-test-dd86f.iam.gserviceaccount.com"]}]}
[debug] {"version":1,"etag":"BwYRlNT20Ts=","bindings":[{"role":"roles/cloudfunctions.admin","members":["serviceAccount:firebase-adminsdk-td3h0@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.developer","members":["serviceAccount:github-action-741034844@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.serviceAgent","members":["serviceAccount:service-518391517553@gcf-admin-robot.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:518391517553@cloudservices.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-518391517553@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-td3h0@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:firebase-adminsdk-td3h0@kiwanis-test-dd86f.iam.gserviceaccount.com","serviceAccount:github-action-741034844@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/firebasehosting.admin","members":["serviceAccount:github-action-741034844@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-518391517553@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-518391517553@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/firestore.serviceAgent","members":["serviceAccount:service-518391517553@gcp-sa-firestore.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-td3h0@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:concoursphotokiwanis@gmail.com"]},{"role":"roles/run.viewer","members":["serviceAccount:github-action-741034844@kiwanis-test-dd86f.iam.gserviceaccount.com"]},{"role":"roles/serviceusage.apiKeysViewer","members":["serviceAccount:github-action-741034844@kiwanis-test-dd86f.iam.gserviceaccount.com"]}]}
[info] +  extensions: Project IAM policy OK 
[debug] [2024-02-17T15:06:53.860Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email [none]
[debug] [2024-02-17T15:06:54.069Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email 200
[debug] [2024-02-17T15:06:54.070Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email {"name":"publishers/firebase/extensions/firestore-send-email","ref":"firebase/firestore-send-email","latestVersion":"0.1.31","latestVersionCreateTime":"2024-02-12T17:57:56.251411Z","state":"PUBLISHED","createTime":"2021-03-18T22:02:59.748671Z","iconUri":"https://storage.googleapis.com/firebase-extensions-icons/extension_icons/firebase/trigger_email_120@2x.png","publisher":{"displayName":"Firebase","iconUri":"https://storage.googleapis.com/firebase-extensions-icons/publisher_icons/firebase/firebase_128dp.png"},"repoUri":"https://github.com/firebase/extensions","metrics":{"activeInstallCount":"22600"},"latestApprovedVersion":"0.1.31"}
[debug] [2024-02-17T15:06:54.070Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email/versions/0.1.31 [none]
[debug] [2024-02-17T15:06:54.266Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email/versions/0.1.31 200
[debug] [2024-02-17T15:06:54.266Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email/versions/0.1.31 {"name":"publishers/firebase/extensions/firestore-send-email/versions/0.1.31","ref":"firebase/firestore-send-email@0.1.31","spec":{"specVersion":"v1beta","name":"firestore-send-email","version":"0.1.31","description":"Composes and sends an email based on the contents of a document written to a specified Cloud Firestore collection.","roles":[{"role":"datastore.user","reason":"Allows this extension to access Cloud Firestore to read and process added email documents."}],"resources":[{"name":"processQueue","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.write\n  resource: projects/${param:PROJECT_ID}/databases/(default)/documents/${param:MAIL_COLLECTION}/{id}\nruntime: nodejs18\n","description":"Processes document changes in the specified Cloud Firestore collection, delivers emails, and updates the document with delivery status information.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Firebase","url":"https://firebase.google.com"},"contributors":[{"authorName":"Michael Bleigh","url":"https://github.com/mbleigh"},{"authorName":"Invertase","email":"oss@invertase.io","url":"https://github.com/invertase"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/firebase/extensions/blob/master/firestore-send-email/CHANGELOG.md","sourceUrl":"https://github.com/firebase/extensions/tree/master/firestore-send-email","params":[{"param":"SMTP_CONNECTION_URI","label":"SMTP connection URI","type":"STRING","description":"A URI representing an SMTP server this extension can use to deliver email. Note that port 25 is blocked by Google Cloud Platform, so we recommend using port 587 for SMTP connections. If you're using the SMTPS protocol, we recommend using port 465. In order to keep passwords secure, it is recommended to omit the password from the connection string while using the `SMTP Password` field for entering secrets and passwords. Passwords and secrets should now be included in `SMTP password` field.\nSecure format:\n `smtps://username@gmail.com@smtp.gmail.com:465` (username only)\n `smtps://smtp.gmail.com:465` (No username and password)\nBackwards Compatible (less secure):\n `smtps://username@gmail.com:password@smtp.gmail.com:465`. (username and\npassword)","required":true,"example":"smtps://username@smtp.hostname.com:465","validationRegex":"^(smtp[s]*://(.*?(:[^:@]*)?@)?[^:@]+:[0-9]+(\\\\?[^ ]*)?)$","validationErrorMessage":"Invalid SMTP connection URI. Must be in the form `smtp(s)://username:password@hostname:port` or `smtp(s)://username@hostname:port`."},{"param":"SMTP_PASSWORD","label":"SMTP password","type":"SECRET","description":"User password for the SMTP server"},{"param":"MAIL_COLLECTION","label":"Email documents collection","type":"STRING","description":"What is the path to the collection that contains the documents used to build and send the emails?","required":true,"default":"mail","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Must be a valid Cloud Firestore collection"},{"param":"DEFAULT_FROM","label":"Default FROM address","type":"STRING","description":"The email address to use as the sender's address (if it's not specified in the added email document). You can optionally include a name with the email address (`Friendly Firebaser <foobar@example.com>`). This parameter does not work with [Gmail SMTP](https://nodemailer.com/usage/using-gmail/).","required":true,"example":"foobar@example.com","validationRegex":"^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$|^.*<(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})>$","validationErrorMessage":"Must be a valid email address or valid name plus email address"},{"param":"DEFAULT_REPLY_TO","label":"Default REPLY-TO address","type":"STRING","description":"The email address to use as the reply-to address (if it's not specified in the added email document)."},{"param":"USERS_COLLECTION","label":"Users collection","type":"STRING","description":"A collection of documents keyed by user UID. If the `toUids`, `ccUids`, and/or `bccUids` recipient options are used in the added email document, this extension delivers email to the `email` field based on lookups in this collection."},{"param":"TEMPLATES_COLLECTION","label":"Templates collection","type":"STRING","description":"A collection of email templates keyed by name. This extension can render an email using a [Handlebar](https://handlebarsjs.com/) template, it's recommended to use triple curly braces `{{{  }}}` in your Handlebars templates when the substitution value is a URL or otherwise sensitive to HTML escaping."},{"param":"TTL_EXPIRE_TYPE","label":"Firestore TTL type","type":"SELECT","description":"Do you want the firestore records to be marked with an expireAt field for a TTL policy? If \"Never\" is selected then no expireAt field will be added. Otherwise you may specify the unit of time specified by the TTL_EXPIRE_VALUE parameter. Defaults to \"Never\".","required":true,"options":[{"value":"never","label":"Never"},{"value":"hour","label":"Hour"},{"value":"day","label":"Day"},{"value":"week","label":"Week"},{"value":"month","label":"Month"},{"value":"year","label":"Year"}],"default":"never"},{"param":"TTL_EXPIRE_VALUE","label":"Firestore TTL value","type":"STRING","description":"In the units specified by TTL_EXPIRE_TYPE, how long do you want records to be ineligible for deletion by a TTL policy? This parameter requires the Firestore TTL type parameter to be set to a value other than `Never`. For example, if `Firestore TTL type` is set to `Day` then setting this parameter to `1` will specify a TTL of 1 day.","required":true,"default":"1","validationRegex":"^[1-9][0-9]*$","validationErrorMessage":"The value must be an integer value greater than zero."},{"param":"TLS_OPTIONS","label":"TLS Options","type":"STRING","description":"A JSON value representing TLS options. For more information, see https://nodejs.org/api/tls.html#tls_class_tls_tlssocket"}],"preinstallContent":"Use this extension to render and send emails that contain the information from documents added to a specified Cloud Firestore collection.\n\nAdding a document triggers this extension to send an email built from the document's fields. The document's top-level fields specify the email sender and recipients, including `to`, `cc`, and `bcc` options (each supporting UIDs). The document's `message` field specifies the other email elements, like subject line and email body (either plaintext or HTML)\n\nHere's a basic example document write that would trigger this extension:\n\n```js\nadmin.firestore().collection('mail').add({\n  to: 'someone@example.com',\n  message: {\n    subject: 'Hello from Firebase!',\n    html: 'This is an <code>HTML</code> email body.',\n  },\n})\n```\n\nYou can also optionally configure this extension to render emails using [Handlebar](https://handlebarsjs.com/) templates. Each template is a document stored in a Cloud Firestore collection.\n\nWhen you configure this extension, you'll need to supply your **SMTP credentials for mail delivery**. Note that this extension is for use with bulk email service providers, like SendGrid, Mailgun, etc.\n\n#### Setup Google App Passwords\n\n**Google** no longer allows **Gmail** users to use their own passwords to authorize third-party apps and services. Instead, you have to use the [Sign in with App Passwords](https://support.google.com/accounts/answer/185833) service to generate a special password for each app you want to authorize. To do so:\n\n1.  Go to your [Google Account](https://myaccount.google.com/).\n2.  Select **Security**.\n3.  Under \"Signing in to Google,\" select **App Passwords**. You may need to sign in. If you donâ€™t have this option, it might be because:\n    1.  2-Step Verification is not set up for your account.\n    2.  2-Step Verification is only set up for security keys.\n    3.  Your account is through work, school, or other organization.\n    4.  You turned on Advanced Protection.\n4.  At the bottom, choose **Select app** and choose **Other** option and then write the name of the app password (e.g. `Firebase Trigger Email from Firestore Extension`) and click **Generate**.\n5.  Follow the instructions to enter the App Password. The App Password is the 16-character code in the yellow bar on your device.\n6.  Tap **Done**.\n\nNow you can use your Google username with the generated password to authorize the extension.\n\n#### Setup Hotmail Passwords\n\nTo use your Outlook/Hotmail email account with this extension, you'll need to have 2FA enabled on your account, and [Create an App Password](https://support.microsoft.com/en-us/help/12409/microsoft-account-app-passwords-and-two-step-verification).\n\n#### Additional setup\n\nBefore installing this extension, make sure that you've [set up a Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) in your Firebase project.\n\n#### Billing\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n\n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the serviceâ€™s no-cost tier:\n  - Cloud Firestore\n  - Cloud Functions (Node.js 10+ runtime. [See FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n\nUsage of this extension also requires you to have SMTP credentials for mail delivery. You are responsible for any associated costs with your usage of your SMTP provider.\n\n#### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Sending Emails Using Firestore And Firebase Extensions](https://invertase.link/Y6Nu)","postinstallContent":"### See it in action\n\nYou can test out this extension right away!\n\n1.  Go to your [Cloud Firestore dashboard](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/data) in the Firebase console.\n\n1.  If it doesn't already exist, create the collection you specified during installation: `${param:MAIL_COLLECTION}`.\n\n1.  Add a document with a `to` field and a `message` field with the following content:\n\n    ```js\n    to: ['someone@example.com'],\n    message: {\n      subject: 'Hello from Firebase!',\n      text: 'This is the plaintext section of the email body.',\n      html: 'This is the <code>HTML</code> section of the email body.',\n    }\n    ```\n\n1.  In a few seconds, you'll see a `delivery` field appear in the document. The field will update as the extension processes the email.\n\n**Note:** You can also use the [Firebase Admin SDK][admin_sdk] to add a document:\n\n```js\nadmin\n  .firestore()\n  .collection(\"${param:MAIL_COLLECTION}\")\n  .add({\n    to: \"someone@example.com\",\n    message: {\n      subject: \"Hello from Firebase!\",\n      text: \"This is the plaintext section of the email body.\",\n      html: \"This is the <code>HTML</code> section of the email body.\",\n    },\n  })\n  .then(() => console.log(\"Queued email for delivery!\"));\n```\n\n### Using this extension\n\nSee the [official documentation](https://firebase.google.com/docs/extensions/official/firestore-send-email) for information on using this extension, including advanced use cases such as using Handlebars templates and managing email delivery status.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\n[mail_collection]: https://console.firebase.google.com/project/_/firestore/data~2F${param:MAIL_COLLECTION}\n[admin_sdk]: https://firebase.google.com/docs/admin/setup\n[amp4email]: https://amp.dev/documentation/guides-and-tutorials/learn/email-spec/amp-email-format/\n[handlebars]: https://handlebarsjs.com/\n\n### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Sending Emails Using Firestore And Firebase Extensions](https://invertase.link/Y6Nu)","readmeContent":"# Trigger Email from Firestore\n\n**Author**: Firebase (**[https://firebase.google.com](https://firebase.google.com)**)\n\n**Description**: Composes and sends an email based on the contents of a document written to a specified Cloud Firestore collection.\n\n\n\n**Details**: Use this extension to render and send emails that contain the information from documents added to a specified Cloud Firestore collection.\n\nAdding a document triggers this extension to send an email built from the document's fields. The document's top-level fields specify the email sender and recipients, including `to`, `cc`, and `bcc` options (each supporting UIDs). The document's `message` field specifies the other email elements, like subject line and email body (either plaintext or HTML)\n\nHere's a basic example document write that would trigger this extension:\n\n```js\nadmin.firestore().collection('mail').add({\n  to: 'someone@example.com',\n  message: {\n    subject: 'Hello from Firebase!',\n    html: 'This is an <code>HTML</code> email body.',\n  },\n})\n```\n\nYou can also optionally configure this extension to render emails using [Handlebar](https://handlebarsjs.com/) templates. Each template is a document stored in a Cloud Firestore collection.\n\nWhen you configure this extension, you'll need to supply your **SMTP credentials for mail delivery**. Note that this extension is for use with bulk email service providers, like SendGrid, Mailgun, etc.\n\n#### Setup Google App Passwords\n\n**Google** no longer allows **Gmail** users to use their own passwords to authorize third-party apps and services. Instead, you have to use the [Sign in with App Passwords](https://support.google.com/accounts/answer/185833) service to generate a special password for each app you want to authorize. To do so:\n\n1.  Go to your [Google Account](https://myaccount.google.com/).\n2.  Select **Security**.\n3.  Under \"Signing in to Google,\" select **App Passwords**. You may need to sign in. If you donâ€™t have this option, it might be because:\n    1.  2-Step Verification is not set up for your account.\n    2.  2-Step Verification is only set up for security keys.\n    3.  Your account is through work, school, or other organization.\n    4.  You turned on Advanced Protection.\n4.  At the bottom, choose **Select app** and choose **Other** option and then write the name of the app password (e.g. `Firebase Trigger Email from Firestore Extension`) and click **Generate**.\n5.  Follow the instructions to enter the App Password. The App Password is the 16-character code in the yellow bar on your device.\n6.  Tap **Done**.\n\nNow you can use your Google username with the generated password to authorize the extension.\n\n#### Setup Hotmail Passwords\n\nTo use your Outlook/Hotmail email account with this extension, you'll need to have 2FA enabled on your account, and [Create an App Password](https://support.microsoft.com/en-us/help/12409/microsoft-account-app-passwords-and-two-step-verification).\n\n#### Additional setup\n\nBefore installing this extension, make sure that you've [set up a Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) in your Firebase project.\n\n#### Billing\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n\n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the serviceâ€™s no-cost tier:\n  - Cloud Firestore\n  - Cloud Functions (Node.js 10+ runtime. [See FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n\nUsage of this extension also requires you to have SMTP credentials for mail delivery. You are responsible for any associated costs with your usage of your SMTP provider.\n\n#### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Sending Emails Using Firestore And Firebase Extensions](https://invertase.link/Y6Nu)\n\n\n\n**Configuration Parameters:**\n\n* SMTP connection URI: A URI representing an SMTP server this extension can use to deliver email. Note that port 25 is blocked by Google Cloud Platform, so we recommend using port 587 for SMTP connections. If you're using the SMTPS protocol, we recommend using port 465. In order to keep passwords secure, it is recommended to omit the password from the connection string while using the `SMTP Password` field for entering secrets and passwords. Passwords and secrets should now be included in `SMTP password` field.\nSecure format:\n `smtps://username@gmail.com@smtp.gmail.com:465` (username only)\n `smtps://smtp.gmail.com:465` (No username and password)\nBackwards Compatible (less secure):\n `smtps://username@gmail.com:password@smtp.gmail.com:465`. (username and\npassword)\n\n* SMTP password: User password for the SMTP server\n\n* Email documents collection: What is the path to the collection that contains the documents used to build and send the emails?\n\n* Default FROM address: The email address to use as the sender's address (if it's not specified in the added email document). You can optionally include a name with the email address (`Friendly Firebaser <foobar@example.com>`). This parameter does not work with [Gmail SMTP](https://nodemailer.com/usage/using-gmail/).\n\n* Default REPLY-TO address: The email address to use as the reply-to address (if it's not specified in the added email document).\n\n* Users collection: A collection of documents keyed by user UID. If the `toUids`, `ccUids`, and/or `bccUids` recipient options are used in the added email document, this extension delivers email to the `email` field based on lookups in this collection.\n\n* Templates collection: A collection of email templates keyed by name. This extension can render an email using a [Handlebar](https://handlebarsjs.com/) template, it's recommended to use triple curly braces `{{{  }}}` in your Handlebars templates when the substitution value is a URL or otherwise sensitive to HTML escaping.\n\n* Firestore TTL type: Do you want the firestore records to be marked with an expireAt field for a TTL policy? If \"Never\" is selected then no expireAt field will be added. Otherwise you may specify the unit of time specified by the TTL_EXPIRE_VALUE parameter. Defaults to \"Never\".\n\n* Firestore TTL value: In the units specified by TTL_EXPIRE_TYPE, how long do you want records to be ineligible for deletion by a TTL policy? This parameter requires the Firestore TTL type parameter to be set to a value other than `Never`. For example, if `Firestore TTL type` is set to `Day` then setting this parameter to `1` will specify a TTL of 1 day.\n\n* TLS Options: A JSON value representing TLS options. For more information, see https://nodejs.org/api/tls.html#tls_class_tls_tlssocket\n\n\n\n**Cloud Functions:**\n\n* **processQueue:** Processes document changes in the specified Cloud Firestore collection, delivers emails, and updates the document with delivery status information.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* datastore.user (Reason: Allows this extension to access Cloud Firestore to read and process added email documents.)\n","displayName":"Trigger Email from Firestore","events":[{"type":"firebase.extensions.firestore-send-email.v1.onStart","description":"Occurs when the extension starts execution."},{"type":"firebase.extensions.firestore-send-email.v1.onProcessing","description":"Occurs when the extension attempts to process an email."},{"type":"firebase.extensions.firestore-send-email.v1.onRetry","description":"Occurs when the extension attempts to resend an email."},{"type":"firebase.extensions.firestore-send-email.v1.onPending","description":"Occurs when an email has a pending status."},{"type":"firebase.extensions.firestore-send-email.v1.onSuccess","description":"Occurs when the extension successfully sends an email."},{"type":"firebase.extensions.firestore-send-email.v1.onComplete","description":"Occurs when the extension completes execution."},{"type":"firebase.extensions.firestore-send-email.v1.onError","description":"Occurs when the extension fails to complete execution."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zÅ¾Ã -Ã¿][A-Za-zÅ½Å¾Ã€-Ã¿0-9_-]{0,62}:[A-Za-zÅ½Å¾Ã€-Ã¿0-9_-]{0,63},\\s*)*([a-zÅ¾Ã -Ã¿][A-Za-zÅ½Å¾Ã€-Ã¿0-9_-]{0,62}:[A-Za-zÅ½Å¾Ã€-Ã¿0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/location","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east1","label":"Taiwan (asia-east1)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast1","label":"Singapore (asia-southeast1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"e89b29bbb06716e3e0b6bfdd2d478acc824d874680ba2b2bdc2ea2883b7d1c42","createTime":"2024-02-12T17:57:56.251411Z","sourceDownloadUri":"https://storage.googleapis.com/firebase-mod-sources-prod/e89b29bbb06716e3e0b6bfdd2d478acc824d874680ba2b2bdc2ea2883b7d1c42","id":"0.1.31","releaseNotes":"docs - updated the description of the `TEMPLATES_COLLECTION` parameter to clarify the use of handlebars templates.\n","buildSourceUri":"https://github.com/firebase/extensions/tree/9a94f260b38ec5ea0ec6260248847f95a10622ff","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"200"},"extensionRoot":"firestore-send-email"}
[debug] [2024-02-17T15:06:54.269Z] >>> [apiv2][query] GET https://iam.googleapis.com/v1/roles/secretmanager.secretAccessor [none]
[debug] [2024-02-17T15:06:54.270Z] >>> [apiv2][query] GET https://iam.googleapis.com/v1/roles/datastore.user [none]
[debug] [2024-02-17T15:06:55.278Z] <<< [apiv2][status] GET https://iam.googleapis.com/v1/roles/secretmanager.secretAccessor 200
[debug] [2024-02-17T15:06:55.278Z] <<< [apiv2][body] GET https://iam.googleapis.com/v1/roles/secretmanager.secretAccessor {"name":"roles/secretmanager.secretAccessor","title":"Secret Manager Secret Accessor","description":"Allows accessing the payload of secrets.","includedPermissions":["resourcemanager.projects.get","resourcemanager.projects.list","secretmanager.versions.access"],"stage":"GA","etag":"AA=="}
[debug] [2024-02-17T15:06:55.312Z] <<< [apiv2][status] GET https://iam.googleapis.com/v1/roles/datastore.user 200
[debug] [2024-02-17T15:06:55.312Z] <<< [apiv2][body] GET https://iam.googleapis.com/v1/roles/datastore.user {"name":"roles/datastore.user","title":"Cloud Datastore User","description":"Provides read/write access to data in a Cloud Datastore database. Intended for application developers and service accounts.","includedPermissions":["appengine.applications.get","datastore.databases.get","datastore.databases.getMetadata","datastore.databases.list","datastore.entities.allocateIds","datastore.entities.create","datastore.entities.delete","datastore.entities.get","datastore.entities.list","datastore.entities.update","datastore.indexes.list","datastore.namespaces.get","datastore.namespaces.list","datastore.statistics.get","datastore.statistics.list","resourcemanager.projects.get","resourcemanager.projects.list"],"stage":"GA","etag":"AA=="}
[info] 
Extension: Trigger Email from Firestore (firebase/firestore-send-email)
Description: Composes and sends an email based on the contents of a document written to a specified Cloud Firestore collection.
Version: 0.1.31 - Latest
Review status: Accepted
View in Extensions Hub: https://extensions.dev/extensions/firebase/firestore-send-email
Source in GitHub: https://github.com/firebase/extensions/tree/9a94f260b38ec5ea0ec6260248847f95a10622ff/firestore-send-email
License: Apache-2.0
Resources created:
  - processQueue (Cloud Function (1st gen)): Processes document changes in the specified Cloud Firestore collection, delivers emails, and updates the document with delivery status information.
  - SMTP_PASSWORD (Cloud Secret Manager secret)
Events emitted:
  - firebase.extensions.firestore-send-email.v1.onStart: Occurs when the extension starts execution.
  - firebase.extensions.firestore-send-email.v1.onProcessing: Occurs when the extension attempts to process an email.
  - firebase.extensions.firestore-send-email.v1.onRetry: Occurs when the extension attempts to resend an email.
  - firebase.extensions.firestore-send-email.v1.onPending: Occurs when an email has a pending status.
  - firebase.extensions.firestore-send-email.v1.onSuccess: Occurs when the extension successfully sends an email.
  - firebase.extensions.firestore-send-email.v1.onComplete: Occurs when the extension completes execution.
  - firebase.extensions.firestore-send-email.v1.onError: Occurs when the extension fails to complete execution.
Roles granted:
  - Secret Manager Secret Accessor: Allows accessing the payload of secrets.
  - Cloud Datastore User: Provides read/write access to data in a Cloud Datastore database. Intended for application developers and service accounts.
[info] 
[info] i  extensions: ensuring required API secretmanager.googleapis.com is enabled... 
[debug] [2024-02-17T15:07:03.221Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/kiwanis-test-dd86f/services/secretmanager.googleapis.com [none]
[debug] [2024-02-17T15:07:03.221Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/kiwanis-test-dd86f/services/secretmanager.googleapis.com x-goog-quota-user=projects/kiwanis-test-dd86f
[debug] [2024-02-17T15:07:04.138Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/kiwanis-test-dd86f/services/secretmanager.googleapis.com 200
[debug] [2024-02-17T15:07:04.138Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/kiwanis-test-dd86f/services/secretmanager.googleapis.com [omitted]
[info] +  extensions: required API secretmanager.googleapis.com is enabled 
[debug] [2024-02-17T15:07:04.139Z] Object "" in "firebase.json" has unknown property: {"additionalProperty":"projects"}
[debug] [2024-02-17T15:07:04.140Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/kiwanis-test-dd86f/adminSdkConfig [none]
[debug] [2024-02-17T15:07:04.448Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/kiwanis-test-dd86f/adminSdkConfig 200
[debug] [2024-02-17T15:07:04.448Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/kiwanis-test-dd86f/adminSdkConfig {"projectId":"kiwanis-test-dd86f","storageBucket":"kiwanis-test-dd86f.appspot.com"}
[debug] [2024-02-17T15:07:04.448Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/kiwanis-test-dd86f [none]
[debug] [2024-02-17T15:07:04.656Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/kiwanis-test-dd86f 200
[debug] [2024-02-17T15:07:04.656Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/kiwanis-test-dd86f {"projectId":"kiwanis-test-dd86f","projectNumber":"518391517553","displayName":"kiwanis-test","name":"projects/kiwanis-test-dd86f","resources":{"hostingSite":"kiwanis-test-dd86f"},"state":"ACTIVE","etag":"1_2b803d69-870b-495f-bfe2-5ed37073f3cd"}
[info] i  extensions: answer the questions below to configure your extension: 
[info] 
SMTP connection URI: A URI representing an SMTP server this extension can use to deliver email. Note that port 25 is blocked by Google Cloud Platform, so we recommend using port 587 for SMTP connections. If you're using the SMTPS protocol, we recommend using port 465. In order to keep passwords secure, it is recommended to omit the password from the connection string while using the SMTP Password field for entering secrets and passwords. Passwords and secrets should now be included in SMTP password field.
Secure format:
 smtps://username@gmail.com@smtp.gmail.com:465 (username only)
 smtps://smtp.gmail.com:465 (No username and password)
Backwards Compatible (less secure):
 smtps://username@gmail.com:password@smtp.gmail.com:465. (username and
password)
